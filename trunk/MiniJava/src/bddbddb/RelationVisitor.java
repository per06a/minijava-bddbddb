//
// Generated by JTB 1.3.2
//

package bddbddb;

import java.util.Enumeration;

import bddbddb.Relation.Tuple;
import syntaxtree.AllocationExpression;
import syntaxtree.AndExpression;
import syntaxtree.ArrayAllocationExpression;
import syntaxtree.ArrayAssignmentStatement;
import syntaxtree.ArrayLength;
import syntaxtree.ArrayLookup;
import syntaxtree.ArrayType;
import syntaxtree.AssignmentStatement;
import syntaxtree.Block;
import syntaxtree.BooleanType;
import syntaxtree.BracketExpression;
import syntaxtree.ClassDeclaration;
import syntaxtree.ClassExtendsDeclaration;
import syntaxtree.CompareExpression;
import syntaxtree.Expression;
import syntaxtree.ExpressionList;
import syntaxtree.ExpressionRest;
import syntaxtree.FalseLiteral;
import syntaxtree.FormalParameter;
import syntaxtree.FormalParameterList;
import syntaxtree.FormalParameterRest;
import syntaxtree.Goal;
import syntaxtree.Identifier;
import syntaxtree.IfStatement;
import syntaxtree.IntegerLiteral;
import syntaxtree.IntegerType;
import syntaxtree.MainClass;
import syntaxtree.MessageSend;
import syntaxtree.MethodDeclaration;
import syntaxtree.MinusExpression;
import syntaxtree.Node;
import syntaxtree.NodeList;
import syntaxtree.NodeListOptional;
import syntaxtree.NodeOptional;
import syntaxtree.NodeSequence;
import syntaxtree.NodeToken;
import syntaxtree.NotExpression;
import syntaxtree.PlusExpression;
import syntaxtree.PrimaryExpression;
import syntaxtree.PrintStatement;
import syntaxtree.Statement;
import syntaxtree.ThisExpression;
import syntaxtree.TimesExpression;
import syntaxtree.TrueLiteral;
import syntaxtree.Type;
import syntaxtree.TypeDeclaration;
import syntaxtree.VarDeclaration;
import syntaxtree.WhileStatement;
import visitor.DepthFirstVisitor;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class RelationVisitor extends DepthFirstVisitor {
	
	private class State {
		boolean allocate;
		String currClass;
		String currMethod;
		int allocationNumber;
		String lastAllocatedType;
		Method methodBeingCalled;
		String lastIdentifier;
		boolean thisTerm;
		String lastHeapLabel;
		String lastMethodType;
		boolean messageSend;
		boolean topLevelMessageSend;
		
		State() {}
		
		State(State state) {
			this.allocate = state.allocate;
			this.allocationNumber = state.allocationNumber;
			this.currClass = state.currClass;
			this.currMethod = state.currMethod;
			this.lastAllocatedType = state.lastAllocatedType;
			this.lastHeapLabel = state.lastHeapLabel;
			this.lastIdentifier = state.lastIdentifier;
			this.lastMethodType = state.lastMethodType;
			this.messageSend = state.messageSend;
			this.methodBeingCalled = state.methodBeingCalled;
			this.thisTerm = state.thisTerm;
			this.topLevelMessageSend = state.topLevelMessageSend;
		}
	}
	
	private final SymbolTable table;
	private final Relation relation;
	private State state;

	public RelationVisitor(SymbolTable table, Relation domain) {
		this.table = table;
		this.relation = domain;
		this.state = new State();
	}
	
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	
	public void visit(NodeList n) {
		int index = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); index++) {
			state.allocate = false;
			e.nextElement().accept(this);
			if (state.allocate && state.methodBeingCalled != null) {
				String label = state.currClass + "_" + state.currMethod + "_alloc" + state.allocationNumber;
				relation.add(bddbddb.Relation.Type.vP0, new Tuple(state.methodBeingCalled.getValue(index), label));
			}
		}
	}

	public void visit(NodeListOptional n) {
		if (n.present())
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();)
				e.nextElement().accept(this);
	}

	public void visit(NodeOptional n) {
		if (n.present())
			n.node.accept(this);
	}

	public void visit(NodeSequence n) {
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();)
			e.nextElement().accept(this);
	}

	public void visit(NodeToken n) {
	}
	
	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> MainClass() f1 -> ( TypeDeclaration() )* f2 -> <EOF>
	 */
	public void visit(Goal n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> "public" f4 -> "static"
	 * f5 -> "void" f6 -> "main" f7 -> "(" f8 -> "String" f9 -> "[" f10 -> "]"
	 * f11 -> Identifier() f12 -> ")" f13 -> "{" f14 -> PrintStatement() f15 ->
	 * "}" f16 -> "}"
	 */
	public void visit(MainClass n) {
		state.currClass = n.f1.f0.tokenImage;
		state.currMethod = "main";
		
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		n.f10.accept(this);
		n.f11.accept(this);
		n.f12.accept(this);
		n.f13.accept(this);
		n.f14.accept(this);
		n.f15.accept(this);
		n.f16.accept(this);
	}

	/**
	 * f0 -> ClassDeclaration() | ClassExtendsDeclaration()
	 */
	public void visit(TypeDeclaration n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> ( VarDeclaration() )* f4 -> (
	 * MethodDeclaration() )* f5 -> "}"
	 */
	public void visit(ClassDeclaration n) {
		state.currClass = n.f1.f0.tokenImage;
		
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
	}

	/**
	 * f0 -> "class" f1 -> Identifier() f2 -> "extends" f3 -> Identifier() f4 ->
	 * "{" f5 -> ( VarDeclaration() )* f6 -> ( MethodDeclaration() )* f7 -> "}"
	 */
	public void visit(ClassExtendsDeclaration n) {
		state.currClass = n.f1.f0.tokenImage;
		
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
	}

	/**
	 * f0 -> Type() f1 -> Identifier() f2 -> ";"
	 */
	public void visit(VarDeclaration n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> "public"
	 * f1 -> Type()
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( * FormalParameterList() )?
	 * f5 -> ")"
	 * f6 -> "{"
	 * f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )*
	 * f9 -> "return"
	 * f10 -> Expression()
	 * f11 -> ";"
	 * f12 -> * "}"
	 */
	public void visit(MethodDeclaration n) {
		state.currMethod = n.f2.f0.tokenImage;
		state.allocationNumber = 0;
		
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		
		state.messageSend = false;
		state.allocate = false;
		state.topLevelMessageSend = true;
		n.f10.accept(this);
		if (state.messageSend || state.allocate) {
			Method method = (Method) table.lookup(state.currClass, "", state.currMethod);
			if (!method.isPrimitive()) {
				String returnLabel = method.getReturnLabel();
				if (state.messageSend)
					relation.add(bddbddb.Relation.Type.assign, new Tuple(returnLabel, state.methodBeingCalled.getReturnLabel()));
				else if (state.allocate)
					relation.add(bddbddb.Relation.Type.assign, new Tuple(returnLabel, state.lastHeapLabel));
			}
		}
		
		n.f11.accept(this);
		n.f12.accept(this);
	}

	/**
	 * f0 -> FormalParameter() f1 -> ( FormalParameterRest() )*
	 */
	public void visit(FormalParameterList n) {
		n.f0.accept(this);
		n.f1.accept(this);
	}

	/**
	 * f0 -> Type() f1 -> Identifier()
	 */
	public void visit(FormalParameter n) {
		n.f0.accept(this);
		n.f1.accept(this);
	}

	/**
	 * f0 -> "," f1 -> FormalParameter()
	 */
	public void visit(FormalParameterRest n) {
		n.f0.accept(this);
		n.f1.accept(this);
	}

	/**
	 * f0 -> ArrayType() | BooleanType() | IntegerType() | Identifier()
	 */
	public void visit(Type n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> "int" f1 -> "[" f2 -> "]"
	 */
	public void visit(ArrayType n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> "boolean"
	 */
	public void visit(BooleanType n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> "int"
	 */
	public void visit(IntegerType n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> Block() | AssignmentStatement() | ArrayAssignmentStatement() |
	 * IfStatement() | WhileStatement() | PrintStatement()
	 */
	public void visit(Statement n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> "{" f1 -> ( Statement() )* f2 -> "}"
	 */
	public void visit(Block n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "="
	 * f2 -> Expression()
	 * f3 -> ";"
	 */
	public void visit(AssignmentStatement n) {
		n.f0.accept(this);
		Variable var = (Variable) table.lookup(state.currClass, state.currMethod, n.f0.f0.tokenImage);
		if (!var.isPrimitive()) {
			state.allocate = false;
			state.messageSend = false;
			state.topLevelMessageSend = true;
			
			n.f2.accept(this);
			if (state.messageSend) {
				String source = state.methodBeingCalled.getReturnLabel();
				relation.add(bddbddb.Relation.Type.assign, new Tuple(var.getValue(0), source));
			} else if (state.allocate) {
				String symbolName = table.getUniqueName(state.currClass, state.currMethod, n.f0.f0.tokenImage);
				relation.add(bddbddb.Relation.Type.vP0, new Tuple(symbolName, state.lastHeapLabel));
			} else if (state.thisTerm) {
				String source = state.currClass;
				relation.add(bddbddb.Relation.Type.assign, new Tuple(var.getValue(0), source));
			} else {
				String source = table.getUniqueName(state.currClass, state.currMethod, state.lastIdentifier);
				relation.add(bddbddb.Relation.Type.assign, new Tuple(var.getValue(0), source));
			}
		}
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "["
	 * f2 -> Expression()
	 * f3 -> "]"
	 * f4 -> "="
	 * f5 -> Expression()
	 * f6 -> ";"
	 */
	public void visit(ArrayAssignmentStatement n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
	}

	/**
	 * f0 -> "if" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement() f5 ->
	 * "else" f6 -> Statement()
	 */
	public void visit(IfStatement n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
	}

	/**
	 * f0 -> "while" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement()
	 */
	public void visit(WhileStatement n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
	}

	/**
	 * f0 -> "System.out.println" f1 -> "(" f2 -> Expression() f3 -> ")" f4 ->
	 * ";"
	 */
	public void visit(PrintStatement n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
	}

	/**
	 * f0 -> AndExpression() | CompareExpression() | PlusExpression() |
	 * MinusExpression() | TimesExpression() | ArrayLookup() | ArrayLength() |
	 * MessageSend() | PrimaryExpression()
	 */
	public void visit(Expression n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "&&" f2 -> PrimaryExpression()
	 */
	public void visit(AndExpression n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "<" f2 -> PrimaryExpression()
	 */
	public void visit(CompareExpression n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "+" f2 -> PrimaryExpression()
	 */
	public void visit(PlusExpression n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "-" f2 -> PrimaryExpression()
	 */
	public void visit(MinusExpression n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "*" f2 -> PrimaryExpression()
	 */
	public void visit(TimesExpression n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "[" f2 -> PrimaryExpression() f3 -> "]"
	 */
	public void visit(ArrayLookup n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression() f1 -> "." f2 -> "length"
	 */
	public void visit(ArrayLength n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "."
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( * ExpressionList() )?
	 * f5 -> ")"
	 */
	public void visit(MessageSend n) {
		State oldState = new State(state);
		state.allocate = false;
		state.messageSend = false;
		state.thisTerm = false;
		state.topLevelMessageSend = false;
		
		n.f0.accept(this);
		String type;
		if (state.allocate)
			type = state.lastAllocatedType;
		else if (state.thisTerm)
			type = state.currClass;
		else if (state.messageSend)
			type = state.lastMethodType;
		else
			type = table.lookup(state.currClass, state.currMethod, state.lastIdentifier).getType();
		
		state.methodBeingCalled = (Method) table.lookup(type, "", n.f2.f0.tokenImage);
		Method methodBeingCalled = state.methodBeingCalled;
		
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		
		state = oldState;
		state.lastMethodType = methodBeingCalled.getType();
		state.messageSend = true;
		if (state.topLevelMessageSend)
			state.methodBeingCalled = methodBeingCalled;
	}

	/**
	 * f0 -> Expression() f1 -> ( ExpressionRest() )*
	 */
	public void visit(ExpressionList n) {
		n.f0.accept(this);
		n.f1.accept(this);
	}

	/**
	 * f0 -> "," f1 -> Expression()
	 */
	public void visit(ExpressionRest n) {
		n.f0.accept(this);
		n.f1.accept(this);
	}

	/**
	 * f0 -> IntegerLiteral() | TrueLiteral() | FalseLiteral() | Identifier() |
	 * ThisExpression() | ArrayAllocationExpression() | AllocationExpression() |
	 * NotExpression() | BracketExpression()
	 */
	public void visit(PrimaryExpression n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public void visit(IntegerLiteral n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> "true"
	 */
	public void visit(TrueLiteral n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> "false"
	 */
	public void visit(FalseLiteral n) {
		n.f0.accept(this);
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public void visit(Identifier n) {
		state.lastIdentifier = n.f0.tokenImage;
		n.f0.accept(this);
	}

	/**
	 * f0 -> "this"
	 */
	public void visit(ThisExpression n) {
		state.thisTerm = true;
		n.f0.accept(this);
	}

	/**
	 * f0 -> "new"
	 * f1 -> "int"
	 * f2 -> "["
	 * f3 -> Expression()
	 * f4 -> "]"
	 */
	public void visit(ArrayAllocationExpression n) {		
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		
		state.allocate = true;
	}

	/**
	 * f0 -> "new"
	 * f1 -> Identifier()
	 * f2 -> "("
	 * f3 -> ")"
	 */
	public void visit(AllocationExpression n) {		
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		
		state.lastAllocatedType = n.f1.f0.tokenImage;
		state.allocationNumber++;
		state.allocate = true;
		
		state.lastHeapLabel = state.currClass + "_" + state.currMethod + "_alloc" + state.allocationNumber;
		relation.add(bddbddb.Relation.Type.vP0, new Tuple(state.lastAllocatedType, state.lastHeapLabel));
	}

	/**
	 * f0 -> "!" f1 -> Expression()
	 */
	public void visit(NotExpression n) {
		n.f0.accept(this);
		n.f1.accept(this);
	}

	/**
	 * f0 -> "(" f1 -> Expression() f2 -> ")"
	 */
	public void visit(BracketExpression n) {
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
	}

}
